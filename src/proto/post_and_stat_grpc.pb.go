// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: post_and_stat.proto

package post_and_stat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PostManager_CreatePost_FullMethodName     = "/PostManager/CreatePost"
	PostManager_UpdatePost_FullMethodName     = "/PostManager/UpdatePost"
	PostManager_DeletePost_FullMethodName     = "/PostManager/DeletePost"
	PostManager_GetPostById_FullMethodName    = "/PostManager/GetPostById"
	PostManager_GetPostsOnPage_FullMethodName = "/PostManager/GetPostsOnPage"
)

// PostManagerClient is the client API for PostManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostManagerClient interface {
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPostById(ctx context.Context, in *GetPostByIdRequest, opts ...grpc.CallOption) (*GetPostByIdResponse, error)
	GetPostsOnPage(ctx context.Context, in *GetPostsOnPageRequest, opts ...grpc.CallOption) (*GetPostsOnPageResponse, error)
}

type postManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewPostManagerClient(cc grpc.ClientConnInterface) PostManagerClient {
	return &postManagerClient{cc}
}

func (c *postManagerClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, PostManager_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postManagerClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PostManager_UpdatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postManagerClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PostManager_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postManagerClient) GetPostById(ctx context.Context, in *GetPostByIdRequest, opts ...grpc.CallOption) (*GetPostByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostByIdResponse)
	err := c.cc.Invoke(ctx, PostManager_GetPostById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postManagerClient) GetPostsOnPage(ctx context.Context, in *GetPostsOnPageRequest, opts ...grpc.CallOption) (*GetPostsOnPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostsOnPageResponse)
	err := c.cc.Invoke(ctx, PostManager_GetPostsOnPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostManagerServer is the server API for PostManager service.
// All implementations must embed UnimplementedPostManagerServer
// for forward compatibility
type PostManagerServer interface {
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*emptypb.Empty, error)
	DeletePost(context.Context, *DeletePostRequest) (*emptypb.Empty, error)
	GetPostById(context.Context, *GetPostByIdRequest) (*GetPostByIdResponse, error)
	GetPostsOnPage(context.Context, *GetPostsOnPageRequest) (*GetPostsOnPageResponse, error)
	mustEmbedUnimplementedPostManagerServer()
}

// UnimplementedPostManagerServer must be embedded to have forward compatible implementations.
type UnimplementedPostManagerServer struct {
}

func (UnimplementedPostManagerServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostManagerServer) UpdatePost(context.Context, *UpdatePostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostManagerServer) DeletePost(context.Context, *DeletePostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostManagerServer) GetPostById(context.Context, *GetPostByIdRequest) (*GetPostByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostById not implemented")
}
func (UnimplementedPostManagerServer) GetPostsOnPage(context.Context, *GetPostsOnPageRequest) (*GetPostsOnPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsOnPage not implemented")
}
func (UnimplementedPostManagerServer) mustEmbedUnimplementedPostManagerServer() {}

// UnsafePostManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostManagerServer will
// result in compilation errors.
type UnsafePostManagerServer interface {
	mustEmbedUnimplementedPostManagerServer()
}

func RegisterPostManagerServer(s grpc.ServiceRegistrar, srv PostManagerServer) {
	s.RegisterService(&PostManager_ServiceDesc, srv)
}

func _PostManager_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostManagerServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostManager_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostManagerServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostManager_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostManagerServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostManager_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostManagerServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostManager_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostManagerServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostManager_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostManagerServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostManager_GetPostById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostManagerServer).GetPostById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostManager_GetPostById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostManagerServer).GetPostById(ctx, req.(*GetPostByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostManager_GetPostsOnPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsOnPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostManagerServer).GetPostsOnPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostManager_GetPostsOnPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostManagerServer).GetPostsOnPage(ctx, req.(*GetPostsOnPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostManager_ServiceDesc is the grpc.ServiceDesc for PostManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PostManager",
	HandlerType: (*PostManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _PostManager_CreatePost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostManager_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostManager_DeletePost_Handler,
		},
		{
			MethodName: "GetPostById",
			Handler:    _PostManager_GetPostById_Handler,
		},
		{
			MethodName: "GetPostsOnPage",
			Handler:    _PostManager_GetPostsOnPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post_and_stat.proto",
}

const (
	StatManager_GetPostStats_FullMethodName  = "/StatManager/GetPostStats"
	StatManager_GetTopPosts_FullMethodName   = "/StatManager/GetTopPosts"
	StatManager_GetTopAuthors_FullMethodName = "/StatManager/GetTopAuthors"
	StatManager_DeletePost_FullMethodName    = "/StatManager/DeletePost"
)

// StatManagerClient is the client API for StatManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatManagerClient interface {
	GetPostStats(ctx context.Context, in *GetPostStatsRequest, opts ...grpc.CallOption) (*GetPostStatsResponse, error)
	GetTopPosts(ctx context.Context, in *GetTopPostsRequest, opts ...grpc.CallOption) (*GetTopPostsResponse, error)
	GetTopAuthors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTopAuthorsResponse, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type statManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewStatManagerClient(cc grpc.ClientConnInterface) StatManagerClient {
	return &statManagerClient{cc}
}

func (c *statManagerClient) GetPostStats(ctx context.Context, in *GetPostStatsRequest, opts ...grpc.CallOption) (*GetPostStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostStatsResponse)
	err := c.cc.Invoke(ctx, StatManager_GetPostStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statManagerClient) GetTopPosts(ctx context.Context, in *GetTopPostsRequest, opts ...grpc.CallOption) (*GetTopPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopPostsResponse)
	err := c.cc.Invoke(ctx, StatManager_GetTopPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statManagerClient) GetTopAuthors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTopAuthorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopAuthorsResponse)
	err := c.cc.Invoke(ctx, StatManager_GetTopAuthors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statManagerClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StatManager_DeletePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatManagerServer is the server API for StatManager service.
// All implementations must embed UnimplementedStatManagerServer
// for forward compatibility
type StatManagerServer interface {
	GetPostStats(context.Context, *GetPostStatsRequest) (*GetPostStatsResponse, error)
	GetTopPosts(context.Context, *GetTopPostsRequest) (*GetTopPostsResponse, error)
	GetTopAuthors(context.Context, *emptypb.Empty) (*GetTopAuthorsResponse, error)
	DeletePost(context.Context, *DeletePostRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedStatManagerServer()
}

// UnimplementedStatManagerServer must be embedded to have forward compatible implementations.
type UnimplementedStatManagerServer struct {
}

func (UnimplementedStatManagerServer) GetPostStats(context.Context, *GetPostStatsRequest) (*GetPostStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostStats not implemented")
}
func (UnimplementedStatManagerServer) GetTopPosts(context.Context, *GetTopPostsRequest) (*GetTopPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopPosts not implemented")
}
func (UnimplementedStatManagerServer) GetTopAuthors(context.Context, *emptypb.Empty) (*GetTopAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopAuthors not implemented")
}
func (UnimplementedStatManagerServer) DeletePost(context.Context, *DeletePostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedStatManagerServer) mustEmbedUnimplementedStatManagerServer() {}

// UnsafeStatManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatManagerServer will
// result in compilation errors.
type UnsafeStatManagerServer interface {
	mustEmbedUnimplementedStatManagerServer()
}

func RegisterStatManagerServer(s grpc.ServiceRegistrar, srv StatManagerServer) {
	s.RegisterService(&StatManager_ServiceDesc, srv)
}

func _StatManager_GetPostStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatManagerServer).GetPostStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatManager_GetPostStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatManagerServer).GetPostStats(ctx, req.(*GetPostStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatManager_GetTopPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatManagerServer).GetTopPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatManager_GetTopPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatManagerServer).GetTopPosts(ctx, req.(*GetTopPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatManager_GetTopAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatManagerServer).GetTopAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatManager_GetTopAuthors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatManagerServer).GetTopAuthors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatManager_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatManagerServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatManager_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatManagerServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatManager_ServiceDesc is the grpc.ServiceDesc for StatManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StatManager",
	HandlerType: (*StatManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostStats",
			Handler:    _StatManager_GetPostStats_Handler,
		},
		{
			MethodName: "GetTopPosts",
			Handler:    _StatManager_GetTopPosts_Handler,
		},
		{
			MethodName: "GetTopAuthors",
			Handler:    _StatManager_GetTopAuthors_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _StatManager_DeletePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post_and_stat.proto",
}
